name: CI & Deploy

on:
  push:
    branches: [main]

env:
  POSTGRES_DB: kubsu
  POSTGRES_USER: kubsu
  POSTGRES_PASSWORD: kubsu
  APP_PORT: 8025
  TEMP_DIR: /home/${{ secrets.SSH_USER }}/docker_temp

jobs:
  build-test-deploy:
    runs-on: self-hosted
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U kubsu"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Initialize DB from dump
        run: |
          psql postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }} \
            -f kubsu/dump.sql

      - name: Build Docker images
        run: |
          docker build -t myapp:test .
          docker build --target builder -t myapp:builder .

      - name: Run tests
        run: |
          docker run --rm \
            --network host \
            -e PYTHONPATH=/app \
            myapp:builder \
            pytest tests/

      - name: Build production image
        run: docker build -t myapp:latest .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prepare remote server
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "mkdir -p ${{ env.TEMP_DIR }} && chmod 777 ${{ env.TEMP_DIR }}"

      - name: Deploy to production
        run: |
          # Package image
          docker save myapp:latest > myapp.tar
          
          # Transfer image
          scp -o StrictHostKeyChecking=no \
              -P ${{ secrets.SSH_PORT }} \
              myapp.tar \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.TEMP_DIR }}/myapp.tar
          
          # Remove local archive
          rm myapp.tar

          # Execute deployment
          ssh -o StrictHostKeyChecking=no \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "set -e && \
               echo '=== Loading Docker image ===' && \
               podman load -i ${{ env.TEMP_DIR }}/myapp.tar && \
               \
               echo '=== Tagging image ===' && \
               podman tag myapp:latest myapp:latest && \
               \
               echo '=== Stopping old container ===' && \
               (podman stop -t 2 myapp || true) && \
               (podman rm -f myapp || true) && \
               \
               echo '=== Cleaning up ===' && \
               podman image prune -f && \
               rm -f ${{ env.TEMP_DIR }}/myapp.tar && \
               \
               echo '=== Starting new container ===' && \
               podman run -d \
                 --name myapp \
                 --network host \
                 --restart unless-stopped \
                 --health-cmd 'curl -f http://localhost:${{ env.APP_PORT }}/health || exit 1' \
                 --health-interval 30s \
                 --health-timeout 5s \
                 --health-retries 3 \
                 myapp:latest \
                 uvicorn src.main:app --host 0.0.0.0 --port ${{ env.APP_PORT }} && \
               \
               echo '=== Deployment successful ==='"
